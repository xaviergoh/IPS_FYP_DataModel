{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project Navigation Guidelines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "===================================================\n",
    "Notebook naming convention for FindMeInside (FMI)\n",
    "===================================================\n",
    "Notebook name: [FMI] <Coord/Label> Alg - Exp<experiment_number>, Trial<trial_number>\n",
    "\n",
    "===================================================\n",
    "Folder/File naming convention\n",
    "===================================================\n",
    "# Folder categorised by Experiment (except Testing folder)\n",
    "Folder name: Experiment<Experiment_number>\n",
    "\n",
    "# Each Folder has N files.\n",
    "# A file is either a 1)Unprocessed Dataset, 2)Processed Dataset, 3)Results dataset, 4) Notebook file\n",
    "# Each experiment has N trials. (Adjustments to parameters/algorithm are made in each trial)\n",
    "Files in folder will be named accordingly...\n",
    "\n",
    "- Raw data point:             E<experiment_number>_Label/Location<location_identifier>_<date>v<version_number>\n",
    "-- e.g. E1_LabelA_230320v1\n",
    "- Raw data collection:        E<experiment_number>_All_Raw_<date>v<version_number>\n",
    "-- e.g. E1_All_Raw_230320v1\n",
    "- Processed data (if any):    E<experiment_number>_All_Proc_<date>v<version_number>\n",
    "-- e.g. E1_All_Proc_230320v1\n",
    "- Resampled data (if any):    E<experiment_number>_resampled_t<trial_number>\n",
    "-- e.g. E1_resampled_t1\n",
    "- Results data:               E<experiment_number>_<algorithm>_t<trial_number>_k<number_of_neighbours>\n",
    "-- e.g. E1_KNN_t1_k37\n",
    "\n",
    "===================================================\n",
    "List of experiment(s) & description(s)\n",
    "===================================================\n",
    ">> Experiment 1 (Exp1) :11 Sensors {1, ..., 11} , 4 Location Labels {A,B,C,D}\n",
    ">> Data collected via Cypress BLE PC App\n",
    ">> Trained Data: Resampled 11-Sensor RSSI Signature (100-x%)\n",
    ">> Tested Data: Resampled 11-Sensor RSSI Signature (x%)\n",
    ">> Output: Location Label (Classification Model)\n",
    "\n",
    ">> Experiment 2 (Exp2) :11 Sensors {1, ..., 11} , 4 Location Coords {(x_A, y_A), ... (x_D, y_D)}\n",
    ">> Data collected via Cypress BLE PC App\n",
    ">> Trained Data: Resampled 11-Sensor RSSI Signature (100-x%)\n",
    ">> Tested Data: Resampled 11-Sensor RSSI Signature (x%)\n",
    ">> Output: Location Coords (Regression Model)\n",
    "\n",
    ">> Experiment 3 (Exp3) : 12 Sensors {0x1, ..., 0xC} , 12 Location Label {(x_1,y_1), ... , (x_12, y_12)}\n",
    ">> Data collected via Cypress BLE PC App\n",
    ">> Trained Data: Resampled 12-Sensor RSSI Signature (100-x%)\n",
    ">> Tested Data: Resampled 12-Sensor RSSI Signature (x%)\n",
    ">> Output: Location Label (Classification Model)\n",
    "\n",
    ">> Experiment 4 (Exp4) : 12 Sensors {0x1, ..., 0xC} , 12 Location Coords {(x_1,y_1), ... , (x_12, y_12)}\n",
    ">> Data collected via Cypress BLE PC App\n",
    ">> Trained Data: Resampled 12-Sensor RSSI Signature (100-x%)\n",
    ">> Tested Data: Resampled 12-Sensor RSSI Signature (x%)\n",
    ">> Output: Location Coords (Regression Model)\n",
    "\n",
    ">> Experiment 5 (Exp5) : 12 Sensors {0x1, ..., 0xC} , 12 Location Coords {(x_1,y_1), ... , (x_12, y_12)}\n",
    ">> Data collected via Cypress BLE PC App\n",
    ">> Trained Data: Averaged 12-Sensor RSSI Signature for 12 Locations\n",
    ">> Tested Data: Averaged 12-Sensor RSSI Signature\n",
    ">> Output: Location Coords (Regression Model)\n",
    "\n",
    ">> Experiment 6 (Exp6) : 12 Sensors {0x1, ..., 0xC} , 12 Location Coords {(x_1,y_1), ... , (x_12, y_12)}\n",
    ">> Data collected via Cypress BLE PC App\n",
    ">> Trained Data: Averaged 12-Sensor RSSI Signature for 12 Locations\n",
    ">> Tested Data: Resampled 12-Sensor RSSI Signature\n",
    ">> Output: Location Coords (Regression Model)\n",
    "'''\n",
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Trial Description"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Trial 1 : \n",
    "Algorithms use Vote mechanic.\n",
    "Resampling done within time period of 2s.\n",
    "'''\n",
    "None"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Core Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd #from pandas import read_csv, pivot_table\n",
    "import numpy as np\n",
    "import math\n",
    "import operator\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
    "from sklearn import preprocessing\n",
    "\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prepare/Load Relevant Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          Date       Time      ID2  RSSI Label\n",
      "0      13/3/20   17:19:27   0x0007   177     A\n",
      "1      13/3/20   17:19:27   0x0006   177     A\n",
      "2      13/3/20   17:19:27   0x0002   181     A\n",
      "3      13/3/20   17:19:27   0x000A   180     A\n",
      "4      13/3/20   17:19:28   0x0005   177     A\n",
      "...        ...        ...      ...   ...   ...\n",
      "16311  13/3/20   18:33:51   0x000B   197     D\n",
      "16312  13/3/20   18:33:51   0x0008   180     D\n",
      "16313  13/3/20   18:33:51   0x0004   182     D\n",
      "16314  13/3/20   18:33:52   0x000A   180     D\n",
      "16315  13/3/20   18:33:52   0x0006   177     D\n",
      "\n",
      "[16316 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "# Read csv file into dataframe.\n",
    "csvfile = pd.read_csv('E1_All_Raw_130320v1.csv')\n",
    "relDf = pd.DataFrame(csvfile)\n",
    "# print(relDf)\n",
    "relDf.columns = relDf.columns.str.strip() #strip unintended whitespaces\n",
    "\n",
    "# print(\"Columns: \", relDf.columns)\n",
    "relDf = relDf[['Date','Time', 'ID2', 'RSSI', 'Label']] #select relevant columns\n",
    "# df = df.drop(columns=['Type', 'ID0', 'ID1', 'Sensor Data', 'Temperature', 'Humidity', 'Raw Data'])\n",
    "print(relDf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Resample/Reshape Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-03-13\n",
      "0:00:00\n",
      "16315\n",
      "    DatetimeSec      ID2  RSSI Label\n",
      "0       62367.0   0x0007   177     A\n",
      "1       62367.0   0x0006   177     A\n",
      "2       62367.0   0x0002   181     A\n",
      "3       62367.0   0x000A   180     A\n",
      "4       62368.0   0x0005   177     A\n",
      "5       62368.0   0x0003   188     A\n",
      "6       62368.0   0x0001   186     A\n",
      "7       62368.0   0x0004   177     A\n",
      "8       62369.0   0x0007   177     A\n",
      "9       62369.0   0x000A   177     A\n",
      "10      62369.0   0x0002   193     A\n",
      "11      62370.0   0x0003   187     A\n",
      "12      62370.0   0x0001   185     A\n",
      "13      62370.0   0x0005   177     A\n",
      "14      62370.0   0x0004   177     A\n",
      "0        0.0\n",
      "1        0.0\n",
      "2        0.0\n",
      "3        0.0\n",
      "4        0.0\n",
      "        ... \n",
      "16311    0.0\n",
      "16312    0.0\n",
      "16313    0.0\n",
      "16314    0.0\n",
      "16315    0.0\n",
      "Name: DatetimeSec, Length: 16316, dtype: float64\n",
      "FILE WRITTEN\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID2</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DatetimeSec</th>\n",
       "      <th>Label</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <th>A</th>\n",
       "      <td>186.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>188.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <th>A</th>\n",
       "      <td>185.0</td>\n",
       "      <td>193.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2.0</th>\n",
       "      <th>A</th>\n",
       "      <td>0.0</td>\n",
       "      <td>199.0</td>\n",
       "      <td>184.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>187.0</td>\n",
       "      <td>181.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3.0</th>\n",
       "      <th>A</th>\n",
       "      <td>178.0</td>\n",
       "      <td>192.0</td>\n",
       "      <td>179.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>180.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>184.0</td>\n",
       "      <td>181.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4.0</th>\n",
       "      <th>A</th>\n",
       "      <td>185.0</td>\n",
       "      <td>191.0</td>\n",
       "      <td>181.0</td>\n",
       "      <td>177.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>178.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>183.0</td>\n",
       "      <td>180.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "ID2                   1      2      3      4      5      6      7      8   \\\n",
       "DatetimeSec Label                                                           \n",
       "0.0         A      186.0  181.0  188.0  177.0  177.0  177.0  177.0    0.0   \n",
       "1.0         A      185.0  193.0  187.0  177.0  177.0    0.0  177.0    0.0   \n",
       "2.0         A        0.0  199.0  184.0  177.0    0.0    0.0  177.0  177.0   \n",
       "3.0         A      178.0  192.0  179.0    0.0  180.0  181.0    0.0  178.0   \n",
       "4.0         A      185.0  191.0  181.0  177.0  178.0    0.0    0.0  178.0   \n",
       "\n",
       "ID2                 9      10     11  \n",
       "DatetimeSec Label                     \n",
       "0.0         A      0.0  180.0    0.0  \n",
       "1.0         A      0.0  177.0    0.0  \n",
       "2.0         A      0.0  187.0  181.0  \n",
       "3.0         A      0.0  184.0  181.0  \n",
       "4.0         A      0.0  183.0  180.0  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Preparation for Date/Time Differences\n",
    "# ----------------------------------------\n",
    "\n",
    "# Combine date and time to datetime\n",
    "readings = relDf.copy()\n",
    "readings['Datetime'] = pd.to_datetime(readings['Date'].apply(str)+' '+readings['Time']) #create new Datetime field\n",
    "dateTime = readings['Datetime']\n",
    "readings = readings.drop(columns=['Datetime'])\n",
    "readings.insert(0, 'Datetime', dateTime)\n",
    "readings = readings.drop(columns=['Date','Time'])\n",
    "readings.tail()\n",
    "\n",
    "from datetime import datetime as dt\n",
    "earliestDate = readings.Datetime.dt.date.min()\n",
    "print(readings.Datetime.dt.date.iloc[-1])\n",
    "print(earliestDate - readings.Datetime.dt.date.iloc[-1])\n",
    "\n",
    "# Function that expresses timestamps in seconds.\n",
    "def time_to_sec(timeArray):\n",
    "    timeSecArray = []\n",
    "    for i in range(len(timeArray)):\n",
    "        seconds = (timeArray[i].hour * 60 + timeArray[i].minute) * 60 + timeArray[i].second\n",
    "        timeSecArray.append(seconds)\n",
    "    return(timeSecArray)\n",
    "\n",
    "# Function that calculates day difference between dates in seconds\n",
    "def date_to_sec(dateArray):\n",
    "    dateSecArray = []\n",
    "    for i in range(len(dateArray)):\n",
    "        dayDiff = dateArray[i] - earliestDate\n",
    "        dateSecArray.append(dayDiff.total_seconds())\n",
    "    print(i)\n",
    "    return(dateSecArray)\n",
    "\n",
    "\n",
    "readings['DateSec'] = date_to_sec(readings.Datetime.dt.date)\n",
    "readings['TimeSec'] = time_to_sec(readings.Datetime.dt.time)\n",
    "readings['DatetimeSec'] = readings['DateSec'] + readings['TimeSec']\n",
    "readings = readings[['DatetimeSec', 'ID2', 'RSSI', 'Label']]\n",
    "print(readings.head(15))\n",
    "\n",
    "# pd.set_option('display.max_columns', 10)\n",
    "# pd.set_option('display.min_rows', 50)\n",
    "# pd.set_option('display.width', 500)\n",
    "\n",
    "readings.DatetimeSec = (readings.DatetimeSec - readings.DatetimeSec.min()) // 2\n",
    "time_diff_btw_rows = readings.DatetimeSec.diff().fillna(0)\n",
    "print(time_diff_btw_rows)\n",
    "time_diff_btw_rows -= (time_diff_btw_rows > 1) & (readings.DatetimeSec % 2 > 0)\n",
    "readings.DatetimeSec -= (time_diff_btw_rows - 1).clip(lower=0).cumsum()\n",
    "readings.ID2 = readings.ID2.transform(lambda hexadecimal: int(hexadecimal, 16))\n",
    "resampled_readings = readings.groupby([\"DatetimeSec\", \"Label\", \"ID2\"]).mean().reset_index()\n",
    "pivoted_readings = pd.pivot_table(resampled_readings, values=\"RSSI\", columns=[\"ID2\"], index=[\"DatetimeSec\", \"Label\"]).fillna(0)\n",
    "\n",
    "writeFile = True\n",
    "if (writeFile == True):\n",
    "    pivoted_readings.to_csv('E1_resampled_T1.csv')\n",
    "    print(\"FILE WRITTEN\")\n",
    "\n",
    "pivoted_readings.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "estimated k value:  38\n",
      "X_test:  [[185. 190. 194. ...   0. 188. 179.]\n",
      " [187. 192. 193. ...   0.   0.   0.]\n",
      " [  0. 181. 179. ...   0. 187. 181.]\n",
      " ...\n",
      " [177. 185. 193. ...   0. 190. 178.]\n",
      " [186.   0. 193. ...   0. 177. 177.]\n",
      " [  0. 177. 183. ...   0. 188. 196.]]\n",
      "y_test:  [['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['A']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['D']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['D']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['D']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['C']\n",
      " ['B']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['D']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['D']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['C']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['C']\n",
      " ['A']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['A']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['C']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['C']\n",
      " ['A']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['D']\n",
      " ['B']\n",
      " ['C']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['C']\n",
      " ['A']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['D']\n",
      " ['B']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['D']\n",
      " ['C']\n",
      " ['B']\n",
      " ['D']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['A']\n",
      " ['C']\n",
      " ['D']\n",
      " ['B']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['C']\n",
      " ['D']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['D']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['A']\n",
      " ['C']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['A']\n",
      " ['C']\n",
      " ['C']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['A']\n",
      " ['D']\n",
      " ['A']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['D']\n",
      " ['A']\n",
      " ['C']\n",
      " ['B']\n",
      " ['B']\n",
      " ['C']\n",
      " ['B']\n",
      " ['A']\n",
      " ['B']\n",
      " ['B']\n",
      " ['D']]\n"
     ]
    }
   ],
   "source": [
    "resampledDS = pd.read_csv('E1_resampled_T1.csv')\n",
    "tempSeries = resampledDS['Label']\n",
    "resampledDS = resampledDS.drop(columns=['Label', 'DatetimeSec'])\n",
    "resampledDS[\"Label\"] = tempSeries\n",
    "resampledDS.head()\n",
    "lastIndex = len(resampledDS)\n",
    "numCol = len(resampledDS.columns)\n",
    "\n",
    "ips_data = resampledDS.iloc[:lastIndex, :numCol-1]\n",
    "# print(ips_data)\n",
    "ips_labels = resampledDS.iloc[:lastIndex, numCol-1:]\n",
    "# print(ips_labels)\n",
    "\n",
    "\n",
    "# #dataset.iloc[rowrange, columnrange]\n",
    "X = ips_data.to_numpy()\n",
    "y = ips_labels.to_numpy()\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle = True,test_size=0.3) \n",
    "y_train = y_train.reshape(len(y_train),)\n",
    "\n",
    "k_value_rootN = math.ceil(math.sqrt(len(X_train)))\n",
    "print(\"estimated k value: \", k_value_rootN)\n",
    "print(\"X_test: \", X_test)\n",
    "print(\"y_test: \", y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Parameter Optimisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# k_range = list(range(1, 31))\n",
    "# print(\"k_range: \", k_range)\n",
    "\n",
    "# classifier = KNeighborsClassifier()\n",
    "\n",
    "# param_grid = dict(n_neighbors=k_range)\n",
    "# print(\"param_grid: \", param_grid)\n",
    "\n",
    "# grid = GridSearchCV(classifier, param_grid, cv=10, scoring='accuracy')\n",
    "\n",
    "# grid.fit(X,y)\n",
    "# print(\"best_estimator: \", grid.best_estimator_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# KNN Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_samples = 20\n",
    "\n",
    "#Function calculates euclidean distance between two n-dimensional data instances \n",
    "def euclideanDistance(instance1, instance2):\n",
    "    #handles if instances are lists or tuples:\n",
    "    instance1 = np.array(instance1) \n",
    "    instance2 = np.array(instance2)\n",
    "    \n",
    "    '''\n",
    "    https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html\n",
    "    uses 2-norm frobenius norm and returns euclidean distance\n",
    "    '''\n",
    "    return np.linalg.norm(instance1 - instance2) #euclidean distance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function finds nearest neighbours; nearest -> smallest euclidean distance\n",
    "def get_neighbors(training_set, \n",
    "                  labels, \n",
    "                  test_instance, \n",
    "                  k, \n",
    "                  distance=euclideanDistance):\n",
    "    \"\"\"\n",
    "    get_neighbors calculates a list of the k nearest neighbors\n",
    "    of an instance 'test_instance'.\n",
    "    The list neighbors contains 3-tuples with  \n",
    "    (index, dist, label)\n",
    "    where\n",
    "    index    is the index from the training_set, \n",
    "    dist     is the distance between the test_instance and the \n",
    "             instance training_set[index]\n",
    "    distance is a reference to a function used to calculate the \n",
    "             distances\n",
    "    \"\"\"\n",
    "    distances = [] #empty distance array\n",
    "    \n",
    "    #calculates euclidean distance between test_instance and ALL other instances in training_set\n",
    "    for index in range(len(training_set)):\n",
    "        dist = euclideanDistance(test_instance, training_set[index])\n",
    "        distances.append((training_set[index], dist, labels[index]))\n",
    "    distances.sort(key=lambda x: x[1])\n",
    "    neighbors = distances[:k]\n",
    "    return neighbors # The list neighbors contains 3-tuples with (index, dist, label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>X_test</th>\n",
       "      <th>y_test</th>\n",
       "      <th>neighbours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[185.0, 190.0, 194.0, 177.0, 177.0, 178.0, 0.0...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>[([185.0, 191.0, 194.0, 177.0, 177.0, 178.0, 0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>[187.0, 192.0, 193.0, 177.0, 179.0, 185.0, 177...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>[([187.0, 194.0, 193.0, 177.0, 179.0, 185.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>[0.0, 181.0, 179.0, 177.0, 185.0, 0.0, 181.0, ...</td>\n",
       "      <td>[A]</td>\n",
       "      <td>[([0.0, 177.0, 178.0, 179.0, 185.0, 0.0, 177.0...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>[177.0, 177.0, 177.0, 180.0, 185.0, 183.0, 179...</td>\n",
       "      <td>[C]</td>\n",
       "      <td>[([177.0, 177.0, 177.0, 179.0, 185.0, 182.0, 1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>[177.0, 0.0, 179.0, 189.0, 191.0, 0.0, 177.0, ...</td>\n",
       "      <td>[C]</td>\n",
       "      <td>[([177.0, 0.0, 179.0, 180.0, 185.0, 0.0, 177.0...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   i                                             X_test y_test  \\\n",
       "0  0  [185.0, 190.0, 194.0, 177.0, 177.0, 178.0, 0.0...    [B]   \n",
       "1  1  [187.0, 192.0, 193.0, 177.0, 179.0, 185.0, 177...    [B]   \n",
       "2  2  [0.0, 181.0, 179.0, 177.0, 185.0, 0.0, 181.0, ...    [A]   \n",
       "3  3  [177.0, 177.0, 177.0, 180.0, 185.0, 183.0, 179...    [C]   \n",
       "4  4  [177.0, 0.0, 179.0, 189.0, 191.0, 0.0, 177.0, ...    [C]   \n",
       "\n",
       "                                          neighbours  \n",
       "0  [([185.0, 191.0, 194.0, 177.0, 177.0, 178.0, 0...  \n",
       "1  [([187.0, 194.0, 193.0, 177.0, 179.0, 185.0, 1...  \n",
       "2  [([0.0, 177.0, 178.0, 179.0, 185.0, 0.0, 177.0...  \n",
       "3  [([177.0, 177.0, 177.0, 179.0, 185.0, 182.0, 1...  \n",
       "4  [([177.0, 0.0, 179.0, 180.0, 185.0, 0.0, 177.0...  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TEST OUTPUT\n",
    "\n",
    "outArray = []\n",
    "for i in range(n_samples):\n",
    "    neighbors = get_neighbors(X_train, \n",
    "                              y_train, \n",
    "                              X_test[i], \n",
    "                              k_value_rootN, \n",
    "                              distance=euclideanDistance)\n",
    "#     print(i,\n",
    "#           X_test[i],\n",
    "#           y_test[i],\n",
    "#           neighbors)\n",
    "    \n",
    "    outArray.append([i,\n",
    "          X_test[i],\n",
    "          y_test[i],\n",
    "          neighbors])\n",
    "\n",
    "out_df = pd.DataFrame(outArray, columns=['i', 'X_test', 'y_test', 'neighbours'])\n",
    "out_df.head()\n",
    "# out_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "\n",
    "#Function enables voting mechanic in KNN for Classification according to majority class vote\n",
    "def vote(neighbors):\n",
    "    class_counter = Counter() #A Counter is a dict subclass for counting hashable objects. \n",
    "    for neighbor in neighbors:\n",
    "        class_counter[neighbor[2]] += 1 #neighbor[2] -> label for neighbor(s)\n",
    "    return class_counter.most_common(1)[0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index:  0 , result of vote:  B , label:  B , data:  [186. 193. 193. 177. 178. 185. 177. 178.   0. 177. 177.]\n",
      "index:  1 , result of vote:  B , label:  B , data:  [186.  194.  198.  180.  177.  179.    0.    0.    0.  179.5 177. ]\n",
      "index:  2 , result of vote:  C , label:  C , data:  [177.    0.  179.  177.  185.  177.  177.  177.    0.  189.  192.5]\n",
      "index:  3 , result of vote:  C , label:  B , data:  [186. 192. 193.   0.   0.   0.   0. 179.   0. 177. 177.]\n",
      "index:  4 , result of vote:  C , label:  D , data:  [  0. 179. 182. 187. 185.   0. 177.   0.   0. 180. 197.]\n"
     ]
    }
   ],
   "source": [
    "k_value_knn = 1\n",
    "for i in range(5):\n",
    "    neighbors = get_neighbors(X_train, \n",
    "                              y_train, \n",
    "                              X_test[i], \n",
    "                              k_value_knn, \n",
    "                              distance=euclideanDistance)\n",
    "    print(\"index: \", i, \n",
    "          \", result of vote: \", vote(neighbors), \n",
    "          \", label: \", y_train[i], \n",
    "          \", data: \", X_train[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function returns vote 'probability' - i.e. distribution/percentage majority vote\n",
    "def vote_prob(neighbors):\n",
    "    class_counter = Counter() # Counter object - https://docs.python.org/2/library/collections.html\n",
    "    for neighbor in neighbors:\n",
    "        class_counter[neighbor[2]] += 1 #add to count of target (class)\n",
    "        \n",
    "    # aggregates into tuples ~ zip(*iterables), \n",
    "    # Return a list of the n most common elements and their counts from the most common to the least.    \n",
    "    labels, votes = zip(*class_counter.most_common()) #returns list of sorted most common [labels], [votes]\n",
    "    #print(\"L|V: \", labels, votes)\n",
    "    #print(\"Class Counter: \", class_counter.most_common)\n",
    "    winner = class_counter.most_common(1)[0][0]       #majority label\n",
    "    votes4winner = class_counter.most_common(1)[0][1] #majority vote count\n",
    "    return winner, votes4winner/sum(votes)            #returns majority label, majority proportion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FileE1_KNN_T1_k1.csvhas been written\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>data</th>\n",
       "      <th>vote_result</th>\n",
       "      <th>vote_prob</th>\n",
       "      <th>label</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[185.0, 190.0, 194.0, 177.0, 177.0, 178.0, 0.0...</td>\n",
       "      <td>B</td>\n",
       "      <td>(B, 1.0)</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>[187.0, 192.0, 193.0, 177.0, 179.0, 185.0, 177...</td>\n",
       "      <td>B</td>\n",
       "      <td>(B, 1.0)</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>[0.0, 181.0, 179.0, 177.0, 185.0, 0.0, 181.0, ...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>A</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>[177.0, 177.0, 177.0, 180.0, 185.0, 183.0, 179...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>[177.0, 0.0, 179.0, 189.0, 191.0, 0.0, 177.0, ...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>[182.0, 178.0, 178.0, 178.0, 184.0, 0.0, 180.0...</td>\n",
       "      <td>A</td>\n",
       "      <td>(A, 1.0)</td>\n",
       "      <td>A</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>[0.0, 0.0, 179.0, 177.0, 185.0, 177.0, 177.0, ...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>[179.0, 0.0, 193.0, 0.0, 177.0, 0.0, 177.0, 0....</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>B</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>[177.0, 0.0, 182.0, 188.0, 185.0, 0.0, 0.0, 18...</td>\n",
       "      <td>D</td>\n",
       "      <td>(D, 1.0)</td>\n",
       "      <td>D</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>[177.0, 177.0, 177.0, 179.0, 185.0, 181.0, 179...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>[185.0, 193.0, 187.0, 177.0, 177.0, 0.0, 177.0...</td>\n",
       "      <td>A</td>\n",
       "      <td>(A, 1.0)</td>\n",
       "      <td>A</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>[184.0, 189.0, 180.0, 177.0, 179.0, 0.0, 0.0, ...</td>\n",
       "      <td>A</td>\n",
       "      <td>(A, 1.0)</td>\n",
       "      <td>A</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>[185.0, 191.0, 193.0, 177.0, 177.0, 177.0, 0.0...</td>\n",
       "      <td>B</td>\n",
       "      <td>(B, 1.0)</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>[177.0, 179.0, 182.0, 187.0, 0.0, 185.0, 177.0...</td>\n",
       "      <td>D</td>\n",
       "      <td>(D, 1.0)</td>\n",
       "      <td>D</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>[177.0, 182.0, 178.0, 190.0, 191.0, 185.0, 0.0...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>[0.0, 177.0, 177.0, 185.0, 185.0, 0.0, 177.0, ...</td>\n",
       "      <td>D</td>\n",
       "      <td>(D, 1.0)</td>\n",
       "      <td>D</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>[177.0, 0.0, 180.0, 177.0, 0.0, 177.0, 177.0, ...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>[177.0, 0.0, 179.0, 0.0, 185.0, 182.0, 177.0, ...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>[177.0, 182.0, 177.0, 0.0, 191.0, 185.0, 0.0, ...</td>\n",
       "      <td>C</td>\n",
       "      <td>(C, 1.0)</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>[186.0, 194.0, 198.0, 180.0, 177.0, 179.0, 0.0...</td>\n",
       "      <td>B</td>\n",
       "      <td>(B, 1.0)</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    index                                               data vote_result  \\\n",
       "0       0  [185.0, 190.0, 194.0, 177.0, 177.0, 178.0, 0.0...           B   \n",
       "1       1  [187.0, 192.0, 193.0, 177.0, 179.0, 185.0, 177...           B   \n",
       "2       2  [0.0, 181.0, 179.0, 177.0, 185.0, 0.0, 181.0, ...           C   \n",
       "3       3  [177.0, 177.0, 177.0, 180.0, 185.0, 183.0, 179...           C   \n",
       "4       4  [177.0, 0.0, 179.0, 189.0, 191.0, 0.0, 177.0, ...           C   \n",
       "5       5  [182.0, 178.0, 178.0, 178.0, 184.0, 0.0, 180.0...           A   \n",
       "6       6  [0.0, 0.0, 179.0, 177.0, 185.0, 177.0, 177.0, ...           C   \n",
       "7       7  [179.0, 0.0, 193.0, 0.0, 177.0, 0.0, 177.0, 0....           C   \n",
       "8       8  [177.0, 0.0, 182.0, 188.0, 185.0, 0.0, 0.0, 18...           D   \n",
       "9       9  [177.0, 177.0, 177.0, 179.0, 185.0, 181.0, 179...           C   \n",
       "10     10  [185.0, 193.0, 187.0, 177.0, 177.0, 0.0, 177.0...           A   \n",
       "11     11  [184.0, 189.0, 180.0, 177.0, 179.0, 0.0, 0.0, ...           A   \n",
       "12     12  [185.0, 191.0, 193.0, 177.0, 177.0, 177.0, 0.0...           B   \n",
       "13     13  [177.0, 179.0, 182.0, 187.0, 0.0, 185.0, 177.0...           D   \n",
       "14     14  [177.0, 182.0, 178.0, 190.0, 191.0, 185.0, 0.0...           C   \n",
       "15     15  [0.0, 177.0, 177.0, 185.0, 185.0, 0.0, 177.0, ...           D   \n",
       "16     16  [177.0, 0.0, 180.0, 177.0, 0.0, 177.0, 177.0, ...           C   \n",
       "17     17  [177.0, 0.0, 179.0, 0.0, 185.0, 182.0, 177.0, ...           C   \n",
       "18     18  [177.0, 182.0, 177.0, 0.0, 191.0, 185.0, 0.0, ...           C   \n",
       "19     19  [186.0, 194.0, 198.0, 180.0, 177.0, 179.0, 0.0...           B   \n",
       "\n",
       "   vote_prob label prediction  \n",
       "0   (B, 1.0)     B    CORRECT  \n",
       "1   (B, 1.0)     B    CORRECT  \n",
       "2   (C, 1.0)     A      WRONG  \n",
       "3   (C, 1.0)     C    CORRECT  \n",
       "4   (C, 1.0)     C    CORRECT  \n",
       "5   (A, 1.0)     A    CORRECT  \n",
       "6   (C, 1.0)     C    CORRECT  \n",
       "7   (C, 1.0)     B      WRONG  \n",
       "8   (D, 1.0)     D    CORRECT  \n",
       "9   (C, 1.0)     C    CORRECT  \n",
       "10  (A, 1.0)     A    CORRECT  \n",
       "11  (A, 1.0)     A    CORRECT  \n",
       "12  (B, 1.0)     B    CORRECT  \n",
       "13  (D, 1.0)     D    CORRECT  \n",
       "14  (C, 1.0)     C    CORRECT  \n",
       "15  (D, 1.0)     D    CORRECT  \n",
       "16  (C, 1.0)     C    CORRECT  \n",
       "17  (C, 1.0)     C    CORRECT  \n",
       "18  (C, 1.0)     C    CORRECT  \n",
       "19  (B, 1.0)     B    CORRECT  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "writeKNN = True\n",
    "resultsKNN = pd.DataFrame(0, index=range(len(X_test)), columns=['index', 'data', 'vote_result', 'vote_prob', 'label', 'prediction'])\n",
    "\n",
    "indexArray = []\n",
    "dataArray = []\n",
    "voteArray = []\n",
    "probArray = []\n",
    "labelArray = []\n",
    "predArray = []\n",
    "for i in range(len(X_test)):\n",
    "    neighbors = get_neighbors(X_train, \n",
    "                              y_train, \n",
    "                              X_test[i], \n",
    "                              k_value_knn, \n",
    "                              distance=euclideanDistance)\n",
    "    indexArray.append(i)\n",
    "    dataArray.append(X_test[i])\n",
    "    voteArray.append(vote(neighbors))\n",
    "    probArray.append(vote_prob(neighbors))\n",
    "    labelArray.append(y_test[i][0])\n",
    "    predArray.append(\"CORRECT\" if (vote(neighbors) == y_test[i]) else \"WRONG\")\n",
    "#     print(\"index: \", i, \n",
    "#           \", result of vote: \", vote(neighbors), \n",
    "#           \", vote_prob: \", vote_prob(neighbors), \n",
    "#           \", label: \", y_test[i], \"prediction: \"\n",
    "#         \"CORRECT\" if (vote(neighbors) == y_test[i]) else \"WRONG\"\n",
    "#           \", data: \", X_test[i])\n",
    "\n",
    "resultsKNN['index'] = indexArray\n",
    "resultsKNN['data'] = dataArray\n",
    "resultsKNN['vote_result'] = voteArray\n",
    "resultsKNN['vote_prob'] = probArray\n",
    "resultsKNN['label'] = labelArray \n",
    "resultsKNN['prediction'] = predArray\n",
    "\n",
    "if (writeKNN == True):\n",
    "    resultsKNN.to_csv('E1_KNN_T1_k'+str(k_value_knn)+'.csv', index=False)\n",
    "    print(\"File \"+'E1_KNN_T1_k'+str(k_value_knn)+'.csv'+\" has been written.\")\n",
    "resultsKNN.head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Rank (Harmonic) Weighted KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function for weighted KNN voting mechanic; harmonic weights based on ranking of datapoint (vote += 1/rank)\n",
    "def vote_harmonic_weights(neighbors, all_results=True):\n",
    "    class_counter = Counter()\n",
    "    number_of_neighbors = len(neighbors)\n",
    "    for index in range(number_of_neighbors):\n",
    "        #weighted count of votes\n",
    "#         print(\"Index: \", index)\n",
    "#         print(class_counter[neighbors[index][2]])\n",
    "#         print(neighbors[index][2][0])\n",
    "        class_counter[neighbors[index][2][0]] += ( 1/(index+1) ) #add (1/ neighbour_rank) for each vote; index+1 = neighbour_rank\n",
    "    labels, votes = zip(*class_counter.most_common())\n",
    "    #print(labels, votes)\n",
    "    winner = class_counter.most_common(1)[0][0]\n",
    "    votes4winner = class_counter.most_common(1)[0][1]\n",
    "    if all_results:\n",
    "        total = sum(class_counter.values(), 0.0)\n",
    "        \n",
    "        for key in class_counter:\n",
    "             class_counter[key] /= total #returns vote proportion for key (\"class\") in class_counter\n",
    "        return winner, class_counter.most_common()\n",
    "    else:\n",
    "        return winner, votes4winner / sum(votes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File E1_RWKNN_T1_k1.csv has been written.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>data</th>\n",
       "      <th>label</th>\n",
       "      <th>vote_result</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[185.0, 190.0, 194.0, 177.0, 177.0, 178.0, 0.0...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>[187.0, 192.0, 193.0, 177.0, 179.0, 185.0, 177...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>[0.0, 181.0, 179.0, 177.0, 185.0, 0.0, 181.0, ...</td>\n",
       "      <td>[A]</td>\n",
       "      <td>C</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>[177.0, 177.0, 177.0, 180.0, 185.0, 183.0, 179...</td>\n",
       "      <td>[C]</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>[177.0, 0.0, 179.0, 189.0, 191.0, 0.0, 177.0, ...</td>\n",
       "      <td>[C]</td>\n",
       "      <td>C</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>609</th>\n",
       "      <td>609</td>\n",
       "      <td>[185.0, 191.0, 194.0, 0.0, 177.0, 0.0, 0.0, 17...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>610</th>\n",
       "      <td>610</td>\n",
       "      <td>[183.0, 189.0, 178.0, 177.0, 177.0, 0.0, 177.0...</td>\n",
       "      <td>[A]</td>\n",
       "      <td>A</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>611</th>\n",
       "      <td>611</td>\n",
       "      <td>[177.0, 185.0, 193.0, 0.0, 177.0, 0.0, 0.0, 17...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>612</td>\n",
       "      <td>[186.0, 0.0, 193.0, 177.0, 178.0, 185.0, 177.0...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>613</th>\n",
       "      <td>613</td>\n",
       "      <td>[0.0, 177.0, 183.0, 185.0, 0.0, 188.0, 0.0, 18...</td>\n",
       "      <td>[D]</td>\n",
       "      <td>D</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>614 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index                                               data label  \\\n",
       "0        0  [185.0, 190.0, 194.0, 177.0, 177.0, 178.0, 0.0...   [B]   \n",
       "1        1  [187.0, 192.0, 193.0, 177.0, 179.0, 185.0, 177...   [B]   \n",
       "2        2  [0.0, 181.0, 179.0, 177.0, 185.0, 0.0, 181.0, ...   [A]   \n",
       "3        3  [177.0, 177.0, 177.0, 180.0, 185.0, 183.0, 179...   [C]   \n",
       "4        4  [177.0, 0.0, 179.0, 189.0, 191.0, 0.0, 177.0, ...   [C]   \n",
       "..     ...                                                ...   ...   \n",
       "609    609  [185.0, 191.0, 194.0, 0.0, 177.0, 0.0, 0.0, 17...   [B]   \n",
       "610    610  [183.0, 189.0, 178.0, 177.0, 177.0, 0.0, 177.0...   [A]   \n",
       "611    611  [177.0, 185.0, 193.0, 0.0, 177.0, 0.0, 0.0, 17...   [B]   \n",
       "612    612  [186.0, 0.0, 193.0, 177.0, 178.0, 185.0, 177.0...   [B]   \n",
       "613    613  [0.0, 177.0, 183.0, 185.0, 0.0, 188.0, 0.0, 18...   [D]   \n",
       "\n",
       "    vote_result prediction  \n",
       "0             B    CORRECT  \n",
       "1             B    CORRECT  \n",
       "2             C      WRONG  \n",
       "3             C    CORRECT  \n",
       "4             C    CORRECT  \n",
       "..          ...        ...  \n",
       "609           B    CORRECT  \n",
       "610           A    CORRECT  \n",
       "611           B    CORRECT  \n",
       "612           B    CORRECT  \n",
       "613           D    CORRECT  \n",
       "\n",
       "[614 rows x 5 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k_value_rwknn = 1\n",
    "writeRWKNN = True\n",
    "resultsRWKNN = pd.DataFrame(0, index=range(len(X_test)), columns=['index', 'data', 'label', 'vote_result', 'prediction'])\n",
    "\n",
    "indexArray = []\n",
    "dataArray = []\n",
    "labelArray = []\n",
    "voteArray = []\n",
    "predArray = []\n",
    "\n",
    "for i in range(len(X_test)):\n",
    "    neighbors = get_neighbors(X_train, \n",
    "                              y_train, \n",
    "                              X_test[i], \n",
    "                              k_value_rwknn, \n",
    "                              distance=euclideanDistance)\n",
    "    \n",
    "    indexArray.append(i)\n",
    "    dataArray.append(X_test[i])\n",
    "    labelArray.append(y_test[i])\n",
    "    voteArray.append(vote_harmonic_weights(neighbors,all_results=True)[0])\n",
    "    predArray.append(\"CORRECT\" if (vote_harmonic_weights(neighbors,all_results=True)[0] == y_test[i]) else \"WRONG\")\n",
    "    \n",
    "#     print(\"index:\", i, \n",
    "#           \",result of vote: \", \n",
    "#           vote_harmonic_weights(neighbors,\n",
    "#                                 all_results=True), \n",
    "#           \",label: \", y_test[i], \n",
    "#         \",prediction: \",\n",
    "#         \"CORRECT\" if ( vote_harmonic_weights(neighbors,\n",
    "#                                 all_results=True)[0] == y_test[i]) else \"WRONG\")\n",
    "    \n",
    "resultsRWKNN['index'] = indexArray\n",
    "resultsRWKNN['data'] = dataArray\n",
    "resultsRWKNN['label'] = labelArray\n",
    "resultsRWKNN['vote_result'] = voteArray\n",
    "resultsRWKNN['prediction'] = predArray\n",
    "\n",
    "if (writeRWKNN == True):\n",
    "    resultsRWKNN.to_csv('E1_RWKNN_T1_k'+str(k_value_rwknn)+'.csv', index=False)\n",
    "    print(\"File \"+'E1_RWKNN_T1_k'+str(k_value_rwknn)+'.csv'+\" has been written.\")\n",
    "resultsRWKNN\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Distance Weighted KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Function for distance weighted KNN voting mechanic; weight based on euclidean distance (vote += 1/distance)\n",
    "def vote_distance_weights(neighbors, all_results=True):\n",
    "    debug = False\n",
    "    class_counter = Counter()\n",
    "    number_of_neighbors = len(neighbors)\n",
    "    for index in range(number_of_neighbors):\n",
    "        dist = neighbors[index][1]\n",
    "        label = neighbors[index][2]\n",
    "        if (debug == True):\n",
    "            print(\"Neighbour record: Label is \", label, \"with distance \", dist)\n",
    "            print(\"Existing count for \", label, \"is \", class_counter[label[0]])\n",
    "            print(\"Adding count by \", (1 / (1 if dist == 0 else dist)))\n",
    "        class_counter[label[0]] += (1 / (1 if dist == 0 else dist)) #sensitivity of distance weight can be adjusted here.\n",
    "        \n",
    "        \n",
    "    labels, votes = zip(*class_counter.most_common())\n",
    "    #print(labels, votes)\n",
    "    winner = class_counter.most_common(1)[0][0]\n",
    "    votes4winner = class_counter.most_common(1)[0][1]\n",
    "    if (debug == True):\n",
    "        print(\"COUNTER: \", class_counter)\n",
    "        print(\"----------------------------------------------------\")\n",
    "        print(\"winner: \", winner)\n",
    "        print(\"votes: \", votes4winner)\n",
    "    \n",
    "    if all_results:\n",
    "        total = sum(class_counter.values(), 0.0)\n",
    "        \n",
    "        for key in class_counter:\n",
    "            class_counter[key] /= total\n",
    "        if (debug == True):\n",
    "            print(\"total votes: \", total)\n",
    "            print(\"AFTER NORMALISING: \", class_counter)\n",
    "        return winner, class_counter.most_common()\n",
    "    else:\n",
    "        return winner, votes4winner / sum(votes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "index:  0 , result of vote:  ('B', [('B', 0.8336307774210913), ('A', 0.14031065463615836), ('C', 0.026058567942750296)]) ,label:  ['B'] ,prediction:  CORRECT\n",
      "\n",
      "\n",
      "\n",
      "index:  1 , result of vote:  ('B', [('B', 0.7849320405988028), ('C', 0.19957389437200837), ('D', 0.015494065029188882)]) ,label:  ['B'] ,prediction:  CORRECT\n",
      "\n",
      "\n",
      "\n",
      "index:  2 , result of vote:  ('C', [('C', 0.9910402907237909), ('B', 0.008959709276209064)]) ,label:  ['A'] ,prediction:  WRONG\n",
      "\n",
      "\n",
      "\n",
      "index:  3 , result of vote:  ('B', [('B', 0.6018395593944441), ('A', 0.33981385740395637), ('C', 0.05834658320159951)]) ,label:  ['C'] ,prediction:  WRONG\n",
      "\n",
      "\n",
      "\n",
      "index:  4 , result of vote:  ('D', [('D', 0.9688426617362194), ('C', 0.019272292171011358), ('A', 0.008053047179751402), ('B', 0.00383199891301781)]) ,label:  ['C'] ,prediction:  WRONG\n",
      "\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "k_value_dwknn = 1\n",
    "testRange = 5\n",
    "for i in range(testRange):\n",
    "    neighbors = get_neighbors(X_test, \n",
    "                              y_test, \n",
    "                              X_train[i], \n",
    "                              k_value_dwknn, \n",
    "                              distance=euclideanDistance)\n",
    "    res = vote_distance_weights(neighbors, all_results=True)\n",
    "    \n",
    "    print(\"index: \", i, \n",
    "      \", result of vote: \", res,\n",
    "    \",label: \", y_test[i], \n",
    "    \",prediction: \",\n",
    "    \"CORRECT\" if ( res[0] == y_test[i]) else \"WRONG\")\n",
    "    print(\"\\n\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File E1_DWKNN_T1_k38.csv has been written.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>data</th>\n",
       "      <th>label</th>\n",
       "      <th>vote_result</th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>[185.0, 190.0, 194.0, 177.0, 177.0, 178.0, 0.0...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>[187.0, 192.0, 193.0, 177.0, 179.0, 185.0, 177...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>[0.0, 181.0, 179.0, 177.0, 185.0, 0.0, 181.0, ...</td>\n",
       "      <td>[A]</td>\n",
       "      <td>C</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>[177.0, 177.0, 177.0, 180.0, 185.0, 183.0, 179...</td>\n",
       "      <td>[C]</td>\n",
       "      <td>B</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>[177.0, 0.0, 179.0, 189.0, 191.0, 0.0, 177.0, ...</td>\n",
       "      <td>[C]</td>\n",
       "      <td>D</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>609</th>\n",
       "      <td>609</td>\n",
       "      <td>[185.0, 191.0, 194.0, 0.0, 177.0, 0.0, 0.0, 17...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>A</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>610</th>\n",
       "      <td>610</td>\n",
       "      <td>[183.0, 189.0, 178.0, 177.0, 177.0, 0.0, 177.0...</td>\n",
       "      <td>[A]</td>\n",
       "      <td>D</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>611</th>\n",
       "      <td>611</td>\n",
       "      <td>[177.0, 185.0, 193.0, 0.0, 177.0, 0.0, 0.0, 17...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>C</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>612</td>\n",
       "      <td>[186.0, 0.0, 193.0, 177.0, 178.0, 185.0, 177.0...</td>\n",
       "      <td>[B]</td>\n",
       "      <td>B</td>\n",
       "      <td>CORRECT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>613</th>\n",
       "      <td>613</td>\n",
       "      <td>[0.0, 177.0, 183.0, 185.0, 0.0, 188.0, 0.0, 18...</td>\n",
       "      <td>[D]</td>\n",
       "      <td>C</td>\n",
       "      <td>WRONG</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>614 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     index                                               data label  \\\n",
       "0        0  [185.0, 190.0, 194.0, 177.0, 177.0, 178.0, 0.0...   [B]   \n",
       "1        1  [187.0, 192.0, 193.0, 177.0, 179.0, 185.0, 177...   [B]   \n",
       "2        2  [0.0, 181.0, 179.0, 177.0, 185.0, 0.0, 181.0, ...   [A]   \n",
       "3        3  [177.0, 177.0, 177.0, 180.0, 185.0, 183.0, 179...   [C]   \n",
       "4        4  [177.0, 0.0, 179.0, 189.0, 191.0, 0.0, 177.0, ...   [C]   \n",
       "..     ...                                                ...   ...   \n",
       "609    609  [185.0, 191.0, 194.0, 0.0, 177.0, 0.0, 0.0, 17...   [B]   \n",
       "610    610  [183.0, 189.0, 178.0, 177.0, 177.0, 0.0, 177.0...   [A]   \n",
       "611    611  [177.0, 185.0, 193.0, 0.0, 177.0, 0.0, 0.0, 17...   [B]   \n",
       "612    612  [186.0, 0.0, 193.0, 177.0, 178.0, 185.0, 177.0...   [B]   \n",
       "613    613  [0.0, 177.0, 183.0, 185.0, 0.0, 188.0, 0.0, 18...   [D]   \n",
       "\n",
       "    vote_result prediction  \n",
       "0             B    CORRECT  \n",
       "1             B    CORRECT  \n",
       "2             C      WRONG  \n",
       "3             B      WRONG  \n",
       "4             D      WRONG  \n",
       "..          ...        ...  \n",
       "609           A      WRONG  \n",
       "610           D      WRONG  \n",
       "611           C      WRONG  \n",
       "612           B    CORRECT  \n",
       "613           C      WRONG  \n",
       "\n",
       "[614 rows x 5 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "writeDWKNN = True\n",
    "resultsDWKNN = pd.DataFrame(0, index=range(len(X_test)), columns=['index', 'data', 'label', 'vote_result', 'prediction'])\n",
    "\n",
    "indexArray = []\n",
    "dataArray = []\n",
    "labelArray = []\n",
    "voteArray = []\n",
    "predArray = []\n",
    "\n",
    "# need to normalise distance!!!!\n",
    "\n",
    "for i in range(len(X_test)):\n",
    "    neighbors = get_neighbors(X_test, \n",
    "                              y_test, \n",
    "                              X_train[i], \n",
    "                              k_value_dwknn, \n",
    "                              distance=euclideanDistance)\n",
    "    vote_distance_weights(neighbors, all_results=True)\n",
    "    \n",
    "    indexArray.append(i)\n",
    "    dataArray.append(X_test[i])\n",
    "    labelArray.append(y_test[i])\n",
    "    voteArray.append(vote_distance_weights(neighbors,all_results=True)[0])\n",
    "    predArray.append(\"CORRECT\" if (vote_distance_weights(neighbors,all_results=True)[0] == y_test[i]) else \"WRONG\")\n",
    "\n",
    "#     print(\"index: \", i, \n",
    "#           \", result of vote: \", vote_distance_weights(neighbors,\n",
    "#                                                       all_results=True),\n",
    "#         \",label: \", y_test[i], \n",
    "#         \",prediction: \",\n",
    "#         \"CORRECT\" if ( vote_harmonic_weights(neighbors,\n",
    "#                                 all_results=True)[0] == y_test[i]) else \"WRONG\")\n",
    "    \n",
    "resultsDWKNN['index'] = indexArray\n",
    "resultsDWKNN['data'] = dataArray\n",
    "resultsDWKNN['label'] = labelArray\n",
    "resultsDWKNN['vote_result'] = voteArray\n",
    "resultsDWKNN['prediction'] = predArray\n",
    "\n",
    "\n",
    "if (writeDWKNN == True):\n",
    "    resultsDWKNN.to_csv('E1_DWKNN_T1_k'+str(k_value_dwknn)+'.csv', index=False) \n",
    "    print(\"File \"+'E1_DWKNN_T1_k'+str(k_value_dwknn)+'.csv'+\" has been written.\")\n",
    "resultsDWKNN\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Analysis via Visualisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 2160x2160 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "KNN_kcomp1 = pd.read_csv('E1_KNN_T1_k38.csv')\n",
    "#count number of CORRECT/ WRONG.\n",
    "KNN_kcomp1_results = KNN_kcomp1.groupby('prediction').count().data\n",
    "count_correct_KNN_kcomp1 = (KNN_kcomp1_results.CORRECT)\n",
    "count_wrong_KNN_kcomp1 = (KNN_kcomp1_results.WRONG)\n",
    "\n",
    "DWKNN_kcomp1 = pd.read_csv('E1_DWKNN_T1_k1.csv')\n",
    "#count number of CORRECT/ WRONG.\n",
    "DWKNN_kcomp1_results = DWKNN_kcomp1.groupby('prediction').count().data\n",
    "count_correct_DWKNN_kcomp1 = (DWKNN_kcomp1_results.CORRECT)\n",
    "count_wrong_DWKNN_kcomp1 = (DWKNN_kcomp1_results.WRONG)\n",
    "\n",
    "KNN_kcomp2 = pd.read_csv('E1_KNN_T1_k1.csv')\n",
    "#count number of CORRECT/ WRONG.\n",
    "KNN_kcomp2_results = KNN_kcomp2.groupby('prediction').count().data\n",
    "count_correct_KNN_kcomp2 = (KNN_kcomp2_results.CORRECT)\n",
    "count_wrong_KNN_kcomp2 = (KNN_kcomp2_results.WRONG)\n",
    "\n",
    "DWKNN_kcomp2 = pd.read_csv('E1_DWKNN_T1_k1.csv')\n",
    "#count number of CORRECT/ WRONG.\n",
    "DWKNN_kcomp2_results = DWKNN_kcomp2.groupby('prediction').count().data\n",
    "count_correct_DWKNN_kcomp2 = (DWKNN_kcomp2_results.CORRECT)\n",
    "count_wrong_DWKNN_kcomp2 = (DWKNN_kcomp2_results.WRONG)\n",
    "\n",
    "# create plot\n",
    "n_groups = 1 # number of groups\n",
    "fig, ax = plt.subplots()\n",
    "index = np.arange(n_groups) # x location for groups\n",
    "bar_width = 1\n",
    "\n",
    "#first bar - rects1+rects2\n",
    "rects1 = plt.bar(index, count_correct_KNN_kcomp1, bar_width, bottom = count_wrong_KNN_kcomp1, \n",
    "#                  label='KNN_38_CORRECT', \n",
    "                 color = 'g')\n",
    "rects2 = plt.bar(index, count_wrong_KNN_kcomp1, bar_width, \n",
    "#                  label='KNN_38_WRONG', \n",
    "                 color = 'r')\n",
    "\n",
    "#first bar - rects3+rects4\n",
    "rects3 = plt.bar(index + 2*bar_width, count_correct_KNN_kcomp2, bar_width, bottom = count_wrong_KNN_kcomp2, \n",
    "#                  label='KNN_1_CORRECT', \n",
    "                 color = 'g')\n",
    "rects4 = plt.bar(index + 2*bar_width, count_wrong_KNN_kcomp2, bar_width, \n",
    "#                  label='KNN_1_WRONG',\n",
    "                 color = 'r')\n",
    "\n",
    "#second bar - rects4+rects5\n",
    "rects5 = plt.bar(index + 4*bar_width, count_correct_DWKNN_kcomp1, bar_width, bottom = count_wrong_DWKNN_kcomp1, \n",
    "#                  label='DWKNN_38_CORRECT', \n",
    "                 color = 'g')\n",
    "rects6 = plt.bar(index + 4*bar_width, count_wrong_DWKNN_kcomp1, bar_width, \n",
    "#                  label='DWKNN_38_WRONG',\n",
    "                 color = 'r')\n",
    "\n",
    "#second bar - rects7+rects8\n",
    "rects7 = plt.bar(index + 6*bar_width, count_correct_DWKNN_kcomp2, bar_width, bottom = count_wrong_DWKNN_kcomp2, \n",
    "#                  label='DWKNN_1_CORRECT', \n",
    "                 color = 'g')\n",
    "rects7 = plt.bar(index + 6*bar_width, count_wrong_DWKNN_kcomp2, bar_width, \n",
    "#                  label='DWKNN_1_WRONG', \n",
    "                 color = 'r')\n",
    "\n",
    "\n",
    "plt.xlabel('Prediction')\n",
    "plt.ylabel('Count')\n",
    "plt.title('Prediction Results for KNN and DWKNN')\n",
    "plt.xticks([0,2*bar_width,4*bar_width, 6*bar_width], [\"KNN_38\", \"KNN_1\", \"DWKNN_38\", \"DWKNN_1\"])\n",
    "# plt.legend(loc='best', bbox_to_anchor=(1,1))\n",
    "plt.figure(figsize=(30,30))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
